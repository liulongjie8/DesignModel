
策略模式：

   将可变的的部分从程序中分离成算法接口，在该接口下分别封装一系列算法实现
并使他们可以相互替换，从而导致客户端程序独立于算法的改变。

设计原则：

   1 、找出应用中需要变化的部分，把他们独立出来， 不要和那些不需要变化的代码混在一起

   2 、面向接口变成，而不是面想实现编程

   3 、多用组合，少用集成

策略模式的实现：

   1 、 通过分离变化得出策略接口

   2 、 提供接口实现类

   3 、 客户程序中有一个策略接口属性

   4 、 在客户程序中选择/组装正确的策略接口的实现

优点：

   1 、 使用了组合，使架构更加灵活

   2 、 富有弹性 ，可以较好的应对开发【开闭原则】

   3 、 更好代码的复用性

   4 、 消除大量的条件语句

缺点：

   1 、客户端代码需要了解策略实现的细节  【每个对象需要注入策略实现】

   2 、增加了对象的数目

使用策略：

   1 、 许多相关的类仅仅是行为的差异

   2 、 运行时选取不同的算法变体

   3 、 通过条件语句在多个分支中选择一个行为




